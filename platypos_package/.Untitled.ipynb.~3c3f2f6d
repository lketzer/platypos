{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy import constants as const\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.style\n",
    "import matplotlib as mpl\n",
    "import matplotlib.ticker as ticker\n",
    "import math\n",
    "from cycler import cycler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from Mass_evolution_function import mass_planet_RK4_forward_Ot14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mass_planet_RK4_forward_Ot14()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$0.83020952 \\; \\mathrm{\\frac{1}{cm^{3}}}$"
      ],
      "text/plain": [
       "<Quantity 0.83020952 1 / cm3>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "26.39*const.M_earth.cgs.value/(4/3*np.pi*(5.59*const.R_earth.cgs)**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "mass_loss_rate_forward_Ot20() missing 7 required positional arguments: 't_', 'epsilon', 'K_on', 'beta_on', 'planet_object', 'radius_at_t', and 'track_dict'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-4dd480eb0c67>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmass_loss_rate_forward_Ot20\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: mass_loss_rate_forward_Ot20() missing 7 required positional arguments: 't_', 'epsilon', 'K_on', 'beta_on', 'planet_object', 'radius_at_t', and 'track_dict'"
     ]
    }
   ],
   "source": [
    "mass_loss_rate_forward_Ot20()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$5.495203 \\; \\mathrm{\\frac{g}{cm^{3}}}$"
      ],
      "text/plain": [
       "<Quantity 5.495203 g / cm3>"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1*const.M_earth.cgs/(4/3*np.pi*(1*const.R_earth.cgs)**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.23873241463784303"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1/(4/3*np.pi*(1)**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6743786508994974e-28"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "ein_cm_in_RE = 1/const.R_earth.cgs.value\n",
    "ein_cm_in_RE\n",
    "\n",
    "ein_g_in_ME = 1/const.M_earth.cgs.value\n",
    "ein_g_in_ME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1433644886868798"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3.3*(ein_g_in_ME/(ein_cm_in_RE)**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.831791854389194"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_planet_Ot19(2.15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mass_planet_Ot19(R_p):\n",
    "    \"\"\"\n",
    "    I only use the volatile rich regime! This means the radius needs to be greater than ~2.115 R_earth (radius with density > 3.3)\n",
    "    \"\"\"\n",
    "    M_earth = const.M_earth.cgs.value\n",
    "    R_earth = const.R_earth.cgs.value\n",
    "    \n",
    "    \n",
    "    if (type(R_p)==int) or (type(R_p)==float) or (type(R_p)==np.float64): # if R is single value\n",
    "        M_p_volatile = 1.74*(R_p)**1.58 # if rho < 3.3 g/cm^3\n",
    "        rho_volatile = M_p_volatile*M_earth/(4/3*np.pi*(R_p*R_earth)**3)\n",
    "        if (rho_volatile >= 3.3):\n",
    "            raise Exception(\"Planet with this radius is too small and likely rocky; use LoFo14 models instead.\")\n",
    "        else:\n",
    "            if (M_p_volatile >= 120):\n",
    "                raise Exception(\"Planet too massive. M-R relation only valid for <120 M_earth.\")\n",
    "            else:\n",
    "                return M_p_volatile\n",
    "            \n",
    "    elif len(R_p) > 1: # if R is array\n",
    "        Ms = []\n",
    "        for i in range(len(R_p)):\n",
    "            M_p_volatile_i = 1.74*(R_p[i])**1.58 # if rho < 3.3 g/cm^3\n",
    "            rho_volatile_i = M_p_volatile_i*M_earth/(4/3*np.pi*(R_p[i]*R_earth)**3)\n",
    "            if (rho_volatile_i >= 3.3) or (M_p_volatile_i >= 120):\n",
    "                M_i = np.nan\n",
    "            else:\n",
    "                M_i = M_p_volatile_i\n",
    "            Ms.append(M_i)\n",
    "        Ms = np.array(Ms)\n",
    "        return Ms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "    def radius_planet_Ot19(M_p):\n",
    "        \"\"\"\n",
    "        I only use the volatile rich regime! This means the mass needs \n",
    "        to be bewteen ~ and 120 M_earth\n",
    "        \"\"\"\n",
    "        M_earth = const.M_earth.cgs.value\n",
    "        R_earth = const.R_earth.cgs.value\n",
    "\n",
    "        if (type(M_p)==int)or(type(M_p)==float) or (type(M_p)==np.float64): # if M is single value\n",
    "            R_p_volatile = 0.7*M_p**0.63 # if rho < 3.3 g/cm^3\n",
    "            rho_volatile = M_p*M_earth/(4/3*np.pi*(R_p_volatile*R_earth)**3)\n",
    "            if (rho_volatile >= 3.3):\n",
    "                raise Exception(\"Planet with this mass/radius is too small and likely rocky; use LoFo14 models instead.\")\n",
    "            else:\n",
    "                if (M_p_volatile >= 120):\n",
    "                    raise Exception(\"Planet too massive. M-R relation only valid for <120 M_earth.\")\n",
    "                else:\n",
    "                    return M_p_volatile\n",
    "\n",
    "        elif len(M_p) > 1: # if M is array\n",
    "            Rs = []\n",
    "            for i in range(len(M_p)):\n",
    "                R_p_volatile_i = 0.7*M_p[i]**0.63 # if rho < 3.3 g/cm^3\n",
    "                rho_volatile_i = M_p[i]*M_earth/(4/3*np.pi*(R_p_volatile_i*R_earth)**3)\n",
    "                if (rho_volatile_i >= 3.3) or (M_p[i] >= 120):\n",
    "                    R_i = np.nan\n",
    "                else:\n",
    "                    R_i = R_p_volatile_i\n",
    "                Rs.append(R_i)\n",
    "            Rs = np.array(Rs)\n",
    "            return Rs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "Exception",
     "evalue": "Planet with this mass/radius is too small and likely rocky; use LoFo14 models instead.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-05eaaf41372c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mradius_planet_Ot19\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-13-04f1196bf08e>\u001b[0m in \u001b[0;36mradius_planet_Ot19\u001b[0;34m(M_p)\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mrho_volatile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mM_p\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mM_earth\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpi\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mR_p_volatile\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mR_earth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mrho_volatile\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m3.3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Planet with this mass/radius is too small and likely rocky; use LoFo14 models instead.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mM_p_volatile\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m120\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mException\u001b[0m: Planet with this mass/radius is too small and likely rocky; use LoFo14 models instead."
     ]
    }
   ],
   "source": [
    "radius_planet_Ot19(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "R = np.arange(1,25, 0.001)\n",
    "M = np.arange(1,130, 0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "Mot = mass_planet_Ot19(R)\n",
    "Rot = radius_planet_Ot19(M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.683648716910445"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mot[~np.isnan(Mot)][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/work2/lketzer/anaconda3/envs/lconda/lib/python3.7/site-packages/IPython/core/pylabtools.py:128: UserWarning: Creating legend with loc=\"best\" can be slow with large amounts of data.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(0.90*(R)**3.45, R, label=\"rocky\")\n",
    "ax.plot(1.74*(R)**1.58, R, label=\"volatile\")\n",
    "ax.plot(Mot, R)\n",
    "ax.loglog()\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
