{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TESTING Python Code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://docs.pytest.org/en/latest/getting-started.html#getstarted\n",
    "\n",
    "https://github.com/chmp/ipytest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pytest\n",
    "import ipytest # https://github.com/chmp/ipytest\n",
    "ipytest.config(rewrite_asserts=True, magics=True)\n",
    "\n",
    "__file__ = \"Untitled.ipynb\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_two_numbers(a, b):\n",
    "    \"\"\" add two numbers \"\"\"\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_answer():\n",
    "    assert add_two_numbers(1, 2) == 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%run_pytest[clean] -qq\n",
    "\n",
    "def test_example():\n",
    "    assert [1, 2, 3] == [1, 2, 3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Function to test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_two_numbers(a, b):\n",
    "    \"\"\" add two numbers \"\"\"\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Define the tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the tests\n",
    "\n",
    "def test_my_func():\n",
    "    assert add_two_numbers(0,0) == 0\n",
    "    assert add_two_numbers(1,-1) == 0\n",
    "    assert add_two_numbers(2,2) == 4\n",
    "    assert add_two_numbers(3,0) == 3\n",
    "    \n",
    "    \n",
    "# @pytest.mark.parametrize('input,input,expected', [\n",
    "#     (0, 0, 0),\n",
    "#     (1, -1, 0),\n",
    "#     (2, 2, 4),\n",
    "#     (3, 0, 3),\n",
    "# ])\n",
    "# def test_parametrized(input, expected):\n",
    "#     assert add_two_numbers(input) == expected\n",
    "    \n",
    "    \n",
    "# @pytest.fixture\n",
    "# def my_fixture():\n",
    "#     return 42\n",
    "    \n",
    "    \n",
    "# def test_fixture(my_fixture):\n",
    "#     assert my_fixture == 42"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Execute the tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# content of test_sample.py\n",
    "def func(x):\n",
    "    return x + 1\n",
    "\n",
    "def Calculate_planet_mass(self):\n",
    "    \"\"\" Planet mass determined by core mass and atmosphere mass (specified in terms of atm. mass fraction [%]). \"\"\"\n",
    "    #M_core = (self.core_mass/const.M_earth.cgs).value\n",
    "    M_pl = self.core_mass/(1-(self.fenv/100))\n",
    "    \n",
    "    if M_pl< 0:\n",
    "        raise ValueError(\"Negative planetmassen am Start.\")\n",
    "    return M_pl  # *const.M_earth.cgs\n",
    "\n",
    "\n",
    "def test_Calculate_planet_mass():\n",
    "    pl = class_planet(argumente)\n",
    "    \n",
    "    with pytest.raises(ValueError):\n",
    "        pl = class_planet(dumme_argumente)\n",
    "        pl.Calculate_planet_mass()\n",
    "    \n",
    "    assert pl.Calculate_planet_mass() < 0.5 Msun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F.                                                                       [100%]\n",
      "=================================== FAILURES ===================================\n",
      "_________________________________ test_answer __________________________________\n",
      "\n",
      "    def test_answer():\n",
      ">       assert func(3) == 5\n",
      "E       assert 4 == 5\n",
      "E        +  where 4 = func(3)\n",
      "\n",
      "<ipython-input-6-b25ca1a2d40d>:7: AssertionError\n"
     ]
    }
   ],
   "source": [
    "# execute the tests via pytest, arguments are passed to pytest\n",
    "ipytest.run('-qq')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
